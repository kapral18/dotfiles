local in_work_dir = require('utils.work_env').in_work_dir

return {
  {
    "github/copilot.vim",
    lazy = false,
    version = "*",
    init = function()
      vim.api.nvim_set_hl(0, "CopilotSuggestion", { fg = "#83a598" })
      vim.api.nvim_set_hl(0, "CopilotAnnotation", { fg = "#03a598" })

      vim.g.copilot_enabled = false -- default off; we flip per buffer

      local is_work_machine = {{ if .isWork }}true{{ else }}false{{ end }}

      local function apply(buf)
        local path = vim.api.nvim_buf_get_name(buf)
        local work_ctx = is_work_machine or in_work_dir(path)
        -- Per-buffer Copilot gate used by mappings
        vim.b[buf].copilot_enabled = work_ctx and true or false
        -- Windsurf flips opposite to Copilot on personal; stays off on work
        if is_work_machine then
          vim.g.codeium_enabled = false
        else
          vim.g.codeium_enabled = not work_ctx
        end
      end

      vim.api.nvim_create_autocmd({ "BufReadPost", "BufWinEnter", "BufEnter" }, {
        callback = function(args) apply(args.buf) end,
      })
    end,
  },

  {
    "Exafunction/windsurf.vim",
    event = "BufEnter",
    init = function()
      vim.g.codeium_disable_bindings = 1 -- preserve your key handling in cmp mappings
      -- Default enablement is decided per-buffer by Copilot’s autocmd above
      vim.g.codeium_enabled = {{ if .isWork }}false{{ else }}true{{ end }}
    end,
  },

  {
    "CopilotC-Nvim/CopilotChat.nvim",
    version = "*",
    cmd = "CopilotChat",
    opts = function()
      local user = vim.env.USER or "User"
      user = user:sub(1, 1):upper() .. user:sub(2)
      return {
        auto_insert_mode = true,
        question_header = "  " .. user .. " ",
        answer_header = "  Copilot ",
        window = { width = 0.4 },
        model = "claude-sonnet-4",
      }
    end,
    keys = {
      { "<c-s>", "<CR>", ft = "copilot-chat", desc = "Submit Prompt", remap = true },
      { "<leader>a", "", desc = "+ai", mode = { "n", "v" } },
      { "<leader>aa", function() return require("CopilotChat").toggle() end, desc = "Toggle (CopilotChat)", mode = { "n", "v" } },
      { "<leader>ax", function() return require("CopilotChat").reset() end, desc = "Clear (CopilotChat)", mode = { "n", "v" } },
      { "<leader>ast", function() return require("CopilotChat").stop() end, desc = "Stop (CopilotChat)", mode = { "n", "v" } },
      { "<leader>aq",
        function()
          vim.ui.input({ prompt = "Quick Chat: " }, function(input)
            if input ~= "" then require("CopilotChat").ask(input) end
          end)
        end,
        desc = "Quick Chat (CopilotChat)", mode = { "n", "v" },
      },
      { "<leader>ap", function() require("CopilotChat").select_prompt() end, desc = "Prompt Actions (CopilotChat)", mode = { "n", "v" } },
    },
    config = function(_, opts)
      local chat = require("CopilotChat")

      vim.api.nvim_create_autocmd("BufEnter", {
        pattern = "copilot-chat",
        callback = function()
          vim.opt_local.relativenumber = false
          vim.opt_local.number = false
        end,
      })

      chat.setup(opts)
    end,
  },
}

