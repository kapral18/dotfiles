#!/usr/bin/env bash
# Description: Sync fish history via 1Password CLI (chronological)

set -euo pipefail

history_file="$HOME/.local/share/fish/fish_history"
item_name="fish-history-sync"
temp_file="/tmp/fish_history_remote"
merged_file="/tmp/fish_history_merged"

# Check if op CLI is available and authenticated
if ! command -v op &>/dev/null; then
  echo "1Password CLI not found. Install with: brew install 1password-cli"
  exit 1
fi

if ! op account get >/dev/null 2>&1; then
  echo "1Password CLI not authenticated. Run: op signin"
  exit 1
fi

# Pull remote history from 1Password
if op document get "$item_name" --out-file "$temp_file" 2>/dev/null; then
  # Verify remote file integrity
  if [ ! -s "$temp_file" ] || ! grep -q "^- cmd:" "$temp_file"; then
    echo "Remote history appears corrupted, skipping sync"
    rm -f "$temp_file"
    exit 1
  fi

  # Merge histories using external Python script
  merge_script="$(dirname "$0")/utils/history/fish-history-merge.py"
  if "$merge_script" "$history_file" "$temp_file" "$merged_file"; then
    if [ -s "$merged_file" ]; then
      mv "$merged_file" "$history_file"
      echo "History merged successfully"
    else
      echo "Failed to merge histories"
      rm -f "$temp_file" "$merged_file"
      exit 1
    fi
  else
    echo "Failed to merge histories"
    rm -f "$temp_file" "$merged_file"
    exit 1
  fi
else
  echo "No remote history found, will create new sync item"
fi

# Push updated history back to 1Password
if op document edit "$item_name" "$history_file" 2>/dev/null; then
  echo "History synced to 1Password"
elif op document create "$history_file" --title "$item_name" >/dev/null 2>&1; then
  echo "Created new history sync item in 1Password"
else
  echo "Failed to sync history to 1Password"
  rm -f "$temp_file" "$merged_file"
  exit 1
fi

# Cleanup
rm -f "$temp_file" "$merged_file"

echo "Fish history sync completed"
