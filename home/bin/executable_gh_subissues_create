#!/usr/bin/env bash
set -euo pipefail

# Ensure we're in an interactive shell with proper readline
if [[ ! -t 0 ]]; then
  echo "Error: This script must be run in an interactive terminal"
  exit 1
fi

# Enable readline editing and history
set -o emacs # or set -o vi if you prefer vi mode
HISTCONTROL=ignoredups

# Colors for better UX
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Session file for storing last session data
SESSION_FILE="/tmp/github-sub-issue-creator-session.json"

# Function to print colored output
print_info() { echo -e "${BLUE}ℹ${NC} $1" >&2; }
print_success() { echo -e "${GREEN}✓${NC} $1" >&2; }
print_warning() { echo -e "${YELLOW}⚠${NC} $1" >&2; }
print_error() { echo -e "${RED}✗${NC} $1" >&2; }

# Function to trim whitespace
trim_whitespace() {
  echo "$1" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'
}

# Function to save session data
save_session() {
  local owner="$1"
  local repo="$2"
  local parent_issue="$3"
  local milestone_title="$4"
  local label="$5"

  cat >"$SESSION_FILE" <<EOF
{
  "owner": "$owner",
  "repo": "$repo",
  "parent_issue": "$parent_issue",
  "milestone_title": "$milestone_title",
  "label": "$label"
}
EOF
}

# Function to load session data
load_session() {
  if [[ -f "$SESSION_FILE" ]]; then
    if command -v jq &>/dev/null; then
      LAST_OWNER=$(jq -r '.owner // ""' "$SESSION_FILE" 2>/dev/null || echo "")
      LAST_REPO=$(jq -r '.repo // ""' "$SESSION_FILE" 2>/dev/null || echo "")
      LAST_PARENT_ISSUE=$(jq -r '.parent_issue // ""' "$SESSION_FILE" 2>/dev/null || echo "")
      LAST_MILESTONE_TITLE=$(jq -r '.milestone_title // ""' "$SESSION_FILE" 2>/dev/null || echo "")
      LAST_LABEL=$(jq -r '.label // ""' "$SESSION_FILE" 2>/dev/null || echo "")
    fi
  fi
}

# Function to check dependencies
check_dependencies() {
  print_info "Checking dependencies..."

  if ! command -v gh &>/dev/null; then
    print_error "GitHub CLI (gh) is not installed"
    echo "Install with: brew install gh (macOS) or visit https://cli.github.com"
    exit 1
  fi

  if ! command -v jq &>/dev/null; then
    print_error "jq is not installed"
    echo "Install with: brew install jq (macOS) or your package manager"
    exit 1
  fi

  if ! gh auth status &>/dev/null; then
    print_error "GitHub CLI is not authenticated"
    echo "Run: gh auth login"
    exit 1
  fi

  print_success "All dependencies are ready"
}

# Enhanced function to prompt for input with proper readline
prompt_with_default() {
  local prompt="$1"
  local default="$2"
  local var_name="$3"
  local input

  # Show prompt with default
  if [[ -n "$default" ]]; then
    printf "%s [%s]: " "$prompt" "$default"
  else
    printf "%s: " "$prompt"
  fi

  # Use readline with editing enabled (-e flag)
  read -e -r input

  # Use default if empty
  if [[ -z "$input" && -n "$default" ]]; then
    input="$default"
  fi

  eval "$var_name=\"\$input\""
}

# Function to get issues data (titles and bodies) using editor
get_issues_data() {
  if [[ -z "${EDITOR:-}" ]]; then
    print_error "EDITOR environment variable is not set. Please set it (e.g., export EDITOR=nvim)"
    exit 1
  fi

  while true; do
    local temp_file
    temp_file=$(mktemp)
    cat <<'EOF' >"$temp_file"
# Instructions:
# Enter each sub-issue in the following format:
#
# Title for issue 1
# Body line 1 (preserve leading/trailing spaces if needed)
# Body line 2
# ...
# ---
# Title for issue 2
# Body line 1
# ...
# ---
#
# - Use '---' on its own line to separate issues.
# - The first non-empty, non-comment line in each section is the title (trimmed).
# - Subsequent lines until '---' are the body (original lines preserved).
# - Lines starting with '#' are ignored (comments).
# - Empty lines are skipped for parsing but preserved in body if part of it.
# - At least one issue required. Empty bodies are allowed.
#
# Example:
# My First Sub-Issue
# This is the body.
# It can be multiline.
# ---
# Second Sub-Issue
# Another body here.
# ---

EOF

    "$EDITOR" "$temp_file"

    local content
    content=$(cat "$temp_file")
    rm "$temp_file"

    # Parse the content
    TITLES=()
    BODIES=()
    local current_title=""
    local current_body=""

    while IFS= read -r line; do
      local trimmed
      trimmed=$(trim_whitespace "$line")

      # Skip comment lines
      if [[ "$trimmed" == "#"* ]]; then
        continue
      fi

      # Handle separator
      if [[ "$trimmed" == "---" ]]; then
        if [[ -n "$current_title" ]]; then
          TITLES+=("$current_title")
          BODIES+=("$current_body")
          current_title=""
          current_body=""
        fi
        continue
      fi

      # Skip empty lines when looking for title
      if [[ -z "$trimmed" && -z "$current_title" ]]; then
        continue
      fi

      # If we don't have a title yet, this becomes the title
      if [[ -z "$current_title" ]]; then
        current_title="$trimmed"
      else
        # Add original line to body (preserving formatting)
        if [[ -n "$current_body" ]]; then
          current_body="$current_body"$'\n'"$line"
        else
          current_body="$line"
        fi
      fi
    done <<<"$content"

    # Add the last issue if exists
    if [[ -n "$current_title" ]]; then
      TITLES+=("$current_title")
      BODIES+=("$current_body")
    fi

    if [[ ${#TITLES[@]} -eq 0 ]]; then
      print_error "No valid issues parsed. Please try again."
      continue
    fi

    # Show parsed issues for confirmation
    echo
    print_info "Parsed ${#TITLES[@]} issues:"
    for i in "${!TITLES[@]}"; do
      local body_preview="${BODIES[$i]:0:50}"
      if [[ ${#BODIES[$i]} -gt 50 ]]; then
        body_preview="$body_preview..."
      elif [[ -z "$body_preview" ]]; then
        body_preview="(empty)"
      fi
      echo "  $((i + 1)). Title: ${TITLES[$i]}"
      echo "     Body: $body_preview"
    done

    echo
    local confirm
    printf "Is this correct? (y/n) [y]: "
    read -e -r confirm
    confirm=${confirm:-y}

    if [[ ! "$confirm" =~ ^[Nn] ]]; then
      break
    fi

    print_info "Let's edit again..."
  done
}

# Function to fetch issue ID given the issue number
fetch_issue_id() {
  local org="$1"
  local repo="$2"
  local issue_number="$3"

  local issue_id
  issue_id=$(gh api graphql -F owner="$org" -f repository="$repo" -F number="$issue_number" -f query='
  query ($owner: String!, $repository: String!, $number: Int!) {
    repository(owner: $owner, name: $repository) {
      issue(number: $number) {
        id
      }
    }
  }' --jq '.data.repository.issue.id')

  # Check if the query was successful
  if [[ $? -ne 0 ]] || [[ -z "$issue_id" ]]; then
    print_error "Issue #$issue_number not found in repository '$repo' of organization '$org'."
    exit 1
  fi

  echo "$issue_id"
}

# Function to check if an issue is already a sub-issue of the parent
is_sub_issue() {
  local parent_id="$1"
  local child_id="$2"

  local sub_ids
  sub_ids=$(gh api graphql \
    -H "GraphQL-Features:issue_types" \
    -H "GraphQL-Features:sub_issues" \
    -F id="$parent_id" \
    -f query='
    query($id: ID!) {
      node(id: $id) {
        ... on Issue {
          subIssues(first: 100) {
            nodes {
              id
            }
          }
        }
      }
    }' --jq '.data.node.subIssues.nodes[].id' 2>/dev/null)

  if echo "$sub_ids" | grep -q "$child_id"; then
    return 0
  else
    return 1
  fi
}

# Function to create a single issue
create_issue() {
  local title="$1"
  local body="$2"
  local label="$3"
  local milestone_number="$4"

  # Calculate date 2 weeks ago in ISO 8601 format
  local two_weeks_ago
  if command -v gdate &>/dev/null; then
    # macOS with GNU coreutils
    two_weeks_ago=$(gdate -d '2 weeks ago' --iso-8601=seconds)
  elif date --version &>/dev/null 2>&1; then
    # GNU date (Linux)
    two_weeks_ago=$(date -d '2 weeks ago' --iso-8601=seconds)
  else
    # BSD date (macOS default)
    two_weeks_ago=$(date -v-2w '+%Y-%m-%dT%H:%M:%SZ')
  fi

  # Check if issue with same title already exists (search issues from last 2 weeks only)
  local existing_num
  existing_num=$(gh api "repos/$OWNER/$REPO/issues?since=$two_weeks_ago&per_page=100" | jq --arg title "$title" '.[] | select(.title == $title) | .number' | head -1)

  if [[ -n "$existing_num" ]]; then
    print_warning "Issue with title '$title' already exists as #$existing_num. Skipping creation."
    echo "$existing_num"
    return
  fi

  print_info "Creating: $title"

  local api_args=(-f title="$title" -f body="$body")
  if [[ -n "$milestone_number" ]]; then
    api_args+=(-F milestone="$milestone_number")
  fi
  if [[ -n "$label" ]]; then
    api_args+=(-F "labels[]=$label")
  fi

  local response
  response=$(gh api --method POST "repos/$OWNER/$REPO/issues" "${api_args[@]}" 2>&1)

  if [[ $? -ne 0 ]]; then
    print_error "Failed to create issue '$title'"
    echo "Error: $response" >&2
    exit 1
  fi

  local new_issue_num
  new_issue_num=$(echo "$response" | jq -r '.number // empty')

  if [[ -z "$new_issue_num" ]]; then
    print_error "Failed to parse issue number for '$title'"
    echo "Response: $response" >&2
    exit 1
  fi

  print_success "Created issue #$new_issue_num"
  echo "$new_issue_num"
}

# Function to add sub-issues to parent using GraphQL
add_sub_issues() {
  local parent_issue_number="$1"
  shift
  local sub_issues=("$@")

  print_info "Adding ${#sub_issues[@]} sub-issues to parent issue #$parent_issue_number..."

  # Fetch parent issue ID
  local parent_issue_id
  parent_issue_id=$(fetch_issue_id "$OWNER" "$REPO" "$parent_issue_number")

  # Add each sub-issue
  for sub_issue_number in "${sub_issues[@]}"; do
    print_info "Adding sub-issue #$sub_issue_number to parent #$parent_issue_number"

    # Fetch child issue ID
    local child_issue_id
    child_issue_id=$(fetch_issue_id "$OWNER" "$REPO" "$sub_issue_number")

    # Check if already linked
    if is_sub_issue "$parent_issue_id" "$child_issue_id"; then
      print_warning "Issue #$sub_issue_number is already a sub-issue of #$parent_issue_number. Skipping."
      continue
    fi

    # Add the sub-issue to the parent issue using GraphQL
    local result
    result=$(gh api graphql \
      -H "GraphQL-Features:issue_types" \
      -H "GraphQL-Features:sub_issues" \
      -f parrentIssueId="$parent_issue_id" \
      -f childIssueId="$child_issue_id" \
      -f query='
      mutation($parrentIssueId: ID!, $childIssueId: ID!) {
        addSubIssue(input: { issueId: $parrentIssueId, subIssueId: $childIssueId }) {
          issue {
            title
            number
            url
            id
            issueType {
              name
            }
          }
          subIssue {
            title
            number
            url
            id
            issueType {
              name
            }
          }
        }
      }' 2>&1)

    if [[ $? -eq 0 ]]; then
      print_success "Successfully added #$sub_issue_number as sub-issue to #$parent_issue_number"
    else
      print_error "Failed to add #$sub_issue_number as sub-issue to #$parent_issue_number"
      echo "Error: $result"
      # Continue with other sub-issues instead of exiting
    fi
  done

  print_success "Sub-issue linking completed"
}

# Function to validate repo exists
validate_repo() {
  local owner="$1"
  local repo="$2"

  if ! gh api "repos/$owner/$repo" &>/dev/null; then
    print_error "Repository $owner/$repo not found or not accessible"
    return 1
  fi
  return 0
}

# Function to validate issue exists
validate_issue() {
  local owner="$1"
  local repo="$2"
  local issue="$3"

  if ! gh api "repos/$owner/$repo/issues/$issue" &>/dev/null; then
    print_error "Issue #$issue not found in $owner/$repo"
    return 1
  fi
  return 0
}

# Function to find milestone number by name or number
find_milestone_number() {
  local owner="$1"
  local repo="$2"
  local milestone_title="$3"

  # Try to find by title
  local milestone_number
  milestone_number=$(gh api "repos/$owner/$repo/milestones?per_page=100" --jq ".[] | select(.title == \"$milestone_title\") | .number")

  if [[ -n "$milestone_number" ]]; then
    echo "$milestone_number"
    return 0
  fi

  return 1
}

# Function to validate milestone exists
validate_milestone() {
  local owner="$1"
  local repo="$2"
  local milestone_title="$3"

  local milestone_number
  milestone_number=$(find_milestone_number "$owner" "$repo" "$milestone_title")

  if [[ -n "$milestone_number" ]]; then
    MILESTONE_NUMBER="$milestone_number"
    return 0
  else
    print_error "Milestone '$milestone_title' not found in $owner/$repo by Title"
    print_info "Available milestones:"
    gh api "repos/$owner/$repo/milestones?per_page=100" --jq '.[] | "ID:  #\(.number) - Title: \(.title)"'
    return 1
  fi
}

# Main interactive function
main() {
  echo
  echo "🚀 GitHub Sub-Issue Creator"
  echo "=================================="
  echo -e "${BLUE}💡${NC} Use ↑/↓ arrows for command history, Tab for completion"
  echo

  # Check dependencies first
  check_dependencies
  echo

  # Load last session data if available
  load_session

  # Get repository information
  print_info "Repository Information"
  echo "----------------------"

  while true; do
    prompt_with_default "GitHub Owner/Organization" "${LAST_OWNER:-}" "OWNER"
    if [[ -n "$OWNER" ]]; then
      break
    fi
    print_warning "Owner is required"
  done

  while true; do
    prompt_with_default "Repository Name" "${LAST_REPO:-}" "REPO"
    if [[ -n "$REPO" ]]; then
      if validate_repo "$OWNER" "$REPO"; then
        break
      fi
    else
      print_warning "Repository name is required"
    fi
  done

  print_success "Repository: $OWNER/$REPO"
  echo

  # Get parent issue
  print_info "Parent Issue"
  echo "------------"

  while true; do
    prompt_with_default "Parent Issue Number" "${LAST_PARENT_ISSUE:-}" "PARENT_ISSUE"
    if [[ "$PARENT_ISSUE" =~ ^[0-9]+$ ]]; then
      if validate_issue "$OWNER" "$REPO" "$PARENT_ISSUE"; then
        break
      fi
    else
      print_warning "Please enter a valid issue number"
    fi
  done

  print_success "Parent Issue: #$PARENT_ISSUE"
  echo

  # Get milestone
  print_info "Milestone"
  echo "---------"

  while true; do
    prompt_with_default "Milestone (title)" "${LAST_MILESTONE_TITLE:-}" "MILESTONE_TITLE"
    if [[ -n "$MILESTONE_TITLE" ]]; then
      if validate_milestone "$OWNER" "$REPO" "$MILESTONE_TITLE"; then
        break
      fi
    else
      print_warning "Please enter a milestone name or ID"
    fi
  done

  print_success "Milestone: $MILESTONE_TITLE (ID: $MILESTONE_NUMBER)"
  echo

  # Get label
  print_info "Label"
  echo "-----"
  prompt_with_default "Label" "${LAST_LABEL:-}" "LABEL"
  if [[ -z "$LABEL" ]]; then
    print_warning "No label provided, not applying any label"
  else
    if ! gh api "repos/$OWNER/$REPO/labels/$LABEL" &>/dev/null; then
      print_warning "Label '$LABEL' does not exist in $OWNER/$REPO"
      echo "Available labels:"
      gh api "repos/$OWNER/$REPO/labels" --jq '.[] | "  \(.name)"'
      LABEL=""
    else
      print_success "Label: $LABEL"
    fi
  fi
  echo

  # Save session data for next time
  save_session "$OWNER" "$REPO" "$PARENT_ISSUE" "$MILESTONE_TITLE" "$LABEL"

  # Get issues data using editor
  print_info "Issues Data"
  echo "-----------"
  print_info "Opening editor to enter titles and bodies..."

  read -r -p "Press Enter to continue..."

  get_issues_data
  echo

  # Show summary
  print_info "Summary"
  echo "-------"
  echo "Repository: $OWNER/$REPO"
  echo "Parent Issue: #$PARENT_ISSUE"
  echo "Milestone: $MILESTONE_TITLE"
  echo "Label: $LABEL"
  echo "Number of sub-issues: ${#TITLES[@]}"
  echo

  local proceed
  printf "Proceed with creation? (y/n) [y]: "
  read -e -r proceed
  proceed=${proceed:-y}

  if [[ "$proceed" =~ ^[Nn] ]]; then
    print_info "Operation cancelled"
    exit 0
  fi

  echo
  print_info "Creating sub-issues..."

  # Create issues
  local created_issues=()

  for i in "${!TITLES[@]}"; do
    local issue_num
    issue_num=$(create_issue "${TITLES[$i]}" "${BODIES[$i]}" "$LABEL" "$MILESTONE_NUMBER")

    if [[ -z "$issue_num" ]]; then
      print_error "Failed to create issue '${TITLES[$i]}'. Skipping..."
      continue
    fi

    created_issues+=("$issue_num")
  done

  # Add sub-issues to parent
  if [[ ${#created_issues[@]} -gt 0 ]]; then
    add_sub_issues "$PARENT_ISSUE" "${created_issues[@]}"
  else
    print_warning "No issues were created or found to link"
  fi

  echo
  print_success "All done!"
  echo "============="
  echo "Created/Found ${#created_issues[@]} sub-issues:"
  for i in "${!created_issues[@]}"; do
    echo "  #${created_issues[$i]} - ${TITLES[$i]}"
  done
  echo
  echo "🔗 Parent issue: https://github.com/$OWNER/$REPO/issues/$PARENT_ISSUE"
  echo "📝 All issues have milestone '$MILESTONE_TITLE' and label '$LABEL'"
  echo "🔗 Sub-issues are properly linked to the parent issue"
}

# Run main function
main "$@"
